import numpy as np
from math import isclose
from mathhelpers import *

PHI = (1+(5**0.5))/2
EDGE_120CELL = 3 - (5**0.5)
EDGE_600CELL = 1/PHI
RADIUS_120CELL = (6-(5**0.5))**0.5
DISTANCE_600CELL = PHI-1
#LATENT_WARP = PHI/2

DODECAPLEX_POINTS = [
    (0,       0,              2,          2           ),
    (PHI,     PHI,            PHI,        (PHI**(-2)) ),
    (1,       1,              1,          (5**(0.5))  ),
    ((1/PHI), (1/PHI),        (1/PHI),    (PHI*PHI)   ),
    (0,       (1/PHI),        PHI,        (5**(0.5))  ),
    (0,       (PHI**(-2)),    1,          (PHI**2)    ),
    ((1/PHI), 1,              PHI,        2           ),
]     # https://en.wikipedia.org/wiki/120-cell

TETRAPLEX_POINTS = [
    (0,      0,          0,      1   ),
    (0.5,    0.5,        0.5,    0.5 ),
    (0,      (0.5*PHI),  0.5,    (0.5/PHI))
]    # https://en.wikipedia.org/wiki/600-cell

D_EVENS = [0,0,0,0,1,1,1] 
T_EVENS = [0,0,1]

def test_initialization():
    for point, length, even in zip(DODECAPLEX_POINTS, [24, 64, 64, 64, 96, 96, 192], D_EVENS):
        assert len(unsigned_permutations(point, even=even)) == length
    for point, length, even in zip(TETRAPLEX_POINTS, [8, 16, 96], T_EVENS):
        assert len(unsigned_permutations(point, even=even)) == length

def _assemble_perms(points, evens):
    out = []
    for p,e in zip(points, evens):
        out.extend([
                tuple(NamedFloat(x, get_cpp_repr(x)) for x in q) 
                    for q in unsigned_permutations(p,e)])
    return tuple(out)

def gen_dodecaplex_vertices():
    return _assemble_perms(DODECAPLEX_POINTS, D_EVENS)

def gen_tetraplex_vertices():
    return _assemble_perms(TETRAPLEX_POINTS, T_EVENS)

def get_seperation(origin, other):
    return np.linalg.norm(np.array(origin)-np.array(other))

def get_neighbors(origin, others):
    neighbor_indeces = tuple( i for i, other in enumerate(others) if isclose(get_seperation(origin, other), DISTANCE_600CELL))
    assert len(neighbor_indeces) == 12
    return neighbor_indeces

def yield_dodecahedrons_from_dodecaplex(dodecaplex_4d_verts, tetraplex_4d_verts):
    for ov in tetraplex_4d_verts:
        cell_points = set(v for v in dodecaplex_4d_verts if isclose(get_seperation(v, ov), RADIUS_120CELL))
        assert len(cell_points) == 20
        yield cell_points

def yield_indexed_dodecahedrons_from_dodecaplex(dodecaplex_4d_verts, tetraplex_4d_verts):
    for ov in tetraplex_4d_verts:
        cell_points = set(tuple((i,v)) for i,v in enumerate(dodecaplex_4d_verts) if isclose(get_seperation(v, ov), RADIUS_120CELL))
        assert len(cell_points) == 20
        yield cell_points

def get_neighbor_map(tetraplex_4d_verts):
    return {i : get_neighbors(center, tetraplex_4d_verts) for i, center in enumerate(tetraplex_4d_verts)}

neighbor_indeces = [
  73, 59, 72, 85, 112, 42, 87, 115, 26, 66, 98, 38,
  33, 44, 97, 99, 90, 52, 43, 40, 116, 46, 69, 41,
  63, 101, 109, 57, 86, 65, 114, 54, 74, 102, 92, 93,
  71, 31, 67, 118, 68, 56, 51, 61, 79, 78, 91, 113,
  36, 119, 28, 111, 60, 35, 49, 34, 62, 110, 29, 39,
  103, 96, 81, 53, 117, 45, 58, 100, 75, 64, 50, 95,
  48, 27, 83, 77, 30, 108, 84, 47, 80, 105, 76, 94,
  88, 24, 70, 82, 104, 106, 37, 55, 107, 32, 25, 89,
  51, 62, 101, 78, 54, 34, 113, 105, 94, 76, 109, 49,
  61, 62, 98, 79, 66, 35, 113, 105, 83, 77, 38, 39,
  49, 28, 76, 102, 109, 114, 108, 50, 75, 27, 110, 45,
  26, 77, 39, 29, 38, 42, 30, 53, 103, 27, 110, 45,
  67, 37, 51, 119, 71, 107, 63, 101, 34, 24, 65, 111,
  68, 55, 61, 119, 71, 107, 59, 98, 35, 25, 85, 36,
  67, 37, 31, 33, 56, 88, 63, 74, 43, 104, 57, 116,
  68, 55, 118, 33, 56, 88, 59, 73, 44, 106, 72, 46,
  104, 116, 86, 69, 82, 70, 58, 64, 95, 40, 57, 92,
  106, 112, 82, 46, 69, 81, 89, 58, 96, 72, 41, 115,
  90, 41, 48, 26, 87, 115, 30, 53, 81, 80, 97, 117,
  24, 86, 32, 111, 60, 75, 70, 100, 95, 65, 28, 114,
  25, 36, 112, 60, 32, 89, 100, 103, 96, 29, 85, 42,
  31, 52, 74, 78, 54, 43, 91, 84, 94, 47, 93, 99,
  118, 91, 52, 84, 73, 44, 79, 83, 66, 48, 90, 87,
  99, 40, 47, 102, 93, 92, 108, 50, 64, 80, 97, 117,
  107, 32, 111, 12, 65, 19, 7, 70, 37, 86, 63, 104,
  107, 36, 7, 32, 106, 55, 13, 59, 89, 85, 112, 20,
  42, 11, 77, 48, 53, 30, 18, 38, 66, 115, 87, 0,
  45, 6, 30, 77, 105, 108, 10, 76, 11, 49, 110, 39,
  49, 75, 10, 60, 110, 109, 4, 34, 111, 19, 65, 114,
  60, 11, 110, 103, 4, 39, 38, 42, 20, 35, 36, 85,
  27, 6, 48, 77, 80, 18, 108, 45, 117, 11, 53, 26,
  52, 14, 91, 43, 21, 74, 33, 67, 78, 56, 118, 3,
  60, 7, 107, 36, 25, 111, 100, 20, 89, 70, 24, 19,
  1, 116, 46, 44, 43, 14, 88, 56, 15, 118, 52, 31,
  8, 49, 51, 28, 62, 4, 12, 111, 119, 109, 65, 101,
  119, 9, 62, 61, 4, 39, 36, 29, 38, 13, 98, 85,
  13, 29, 35, 4, 107, 119, 25, 85, 20, 60, 32, 111,
  12, 107, 7, 88, 24, 104, 14, 67, 63, 56, 71, 55,
  39, 77, 66, 9, 0, 26, 35, 98, 85, 29, 11, 42,
  9, 77, 11, 27, 35, 29, 38, 105, 62, 4, 110, 49,
  69, 16, 97, 23, 64, 99, 92, 93, 1, 57, 116, 43,
  97, 18, 44, 90, 46, 69, 1, 72, 87, 81, 17, 115,
  96, 0, 20, 112, 85, 38, 103, 29, 11, 53, 115, 26,
  74, 21, 99, 52, 57, 93, 40, 116, 1, 14, 31, 33,
  90, 33, 72, 15, 87, 73, 52, 118, 22, 41, 1, 46,
  27, 30, 103, 11, 5, 53, 108, 50, 117, 110, 10, 75,
  15, 41, 44, 1, 88, 33, 106, 72, 17, 69, 82, 116,
  23, 84, 99, 102, 80, 108, 94, 76, 6, 21, 54, 93,
  18, 90, 6, 80, 26, 30, 77, 84, 83, 87, 66, 22,
  76, 8, 110, 4, 34, 62, 27, 105, 39, 109, 10, 28,
  64, 92, 75, 114, 95, 23, 10, 102, 108, 5, 45, 117,
  34, 119, 12, 67, 101, 71, 3, 62, 61, 8, 78, 113,
  90, 84, 99, 91, 44, 22, 1, 118, 33, 21, 43, 31,
  11, 26, 42, 96, 115, 81, 103, 30, 18, 5, 45, 117,
  74, 101, 21, 2, 94, 78, 8, 47, 93, 76, 109, 102,
  107, 7, 88, 71, 37, 25, 106, 56, 13, 15, 59, 68,
  118, 15, 88, 33, 3, 68, 31, 14, 67, 37, 55, 71,
  93, 74, 14, 2, 63, 40, 43, 92, 86, 104, 116, 16,
  17, 69, 81, 89, 96, 64, 82, 16, 70, 5, 100, 95,
  25, 85, 98, 73, 112, 0, 72, 13, 68, 106, 15, 55,
  100, 19, 28, 4, 111, 29, 110, 103, 75, 32, 20, 36,
  35, 119, 13, 9, 98, 71, 62, 51, 113, 68, 79, 3,
  49, 39, 105, 34, 4, 35, 8, 9, 113, 119, 51, 61,
  12, 101, 74, 67, 57, 2, 37, 14, 104, 24, 65, 86,
  58, 95, 50, 16, 69, 92, 5, 117, 81, 97, 23, 40,
  28, 34, 111, 101, 19, 86, 109, 114, 2, 24, 12, 63,
  98, 9, 83, 79, 22, 73, 38, 87, 0, 48, 77, 26,
  71, 56, 31, 12, 37, 14, 51, 3, 78, 101, 74, 63,
  71, 61, 98, 73, 3, 79, 118, 13, 59, 56, 15, 55,
  16, 17, 81, 58, 82, 40, 64, 41, 97, 116, 46, 1,
  7, 95, 19, 16, 32, 100, 58, 82, 89, 24, 86, 104,
  12, 119, 107, 55, 13, 51, 61, 68, 3, 67, 37, 56,
  46, 106, 112, 44, 15, 59, 0, 73, 17, 87, 115, 41,
  66, 72, 0, 98, 59, 79, 87, 44, 22, 15, 118, 68,
  54, 101, 67, 14, 78, 31, 93, 43, 21, 2, 57, 63,
  45, 5, 60, 103, 50, 114, 19, 100, 95, 110, 28, 10,
  27, 102, 49, 10, 109, 54, 6, 108, 47, 105, 8, 94,
  66, 48, 83, 26, 11, 105, 30, 6, 27, 38, 9, 39,
  31, 74, 51, 101, 67, 21, 8, 54, 94, 3, 113, 91,
  22, 98, 66, 68, 118, 73, 61, 9, 83, 3, 91, 113,
  117, 6, 108, 47, 84, 30, 18, 48, 90, 23, 97, 99,
  18, 53, 96, 97, 117, 115, 58, 5, 64, 69, 41, 17,
  116, 70, 104, 7, 46, 88, 69, 16, 58, 89, 17, 106,
  79, 9, 66, 105, 22, 84, 113, 91, 94, 77, 48, 6,
  52, 80, 21, 99, 6, 47, 91, 83, 94, 90, 22, 48,
  25, 36, 29, 13, 59, 0, 42, 112, 20, 35, 38, 98,
  24, 2, 19, 65, 114, 70, 95, 92, 16, 104, 63, 57,
  66, 0, 48, 26, 18, 73, 90, 22, 44, 115, 72, 41,
  33, 14, 106, 46, 15, 55, 56, 37, 7, 116, 82, 104,
  25, 96, 112, 32, 20, 17, 100, 58, 70, 7, 82, 106,
  1, 80, 99, 52, 84, 44, 97, 48, 22, 18, 41, 87,
  84, 94, 52, 118, 83, 22, 31, 21, 78, 3, 113, 79,
  57, 86, 114, 50, 2, 102, 40, 23, 93, 16, 95, 64,
  74, 54, 2, 47, 40, 57, 99, 21, 43, 92, 23, 102,
  21, 47, 84, 78, 54, 8, 91, 113, 76, 83, 105, 6,
  86, 114, 16, 5, 58, 70, 92, 64, 50, 75, 19, 100,
  115, 100, 5, 81, 20, 112, 103, 53, 42, 89, 17, 58,
  69, 81, 18, 90, 41, 1, 64, 40, 99, 80, 117, 23,
  35, 61, 9, 79, 66, 85, 38, 13, 68, 73, 0, 59,
  52, 43, 40, 84, 1, 90, 23, 80, 97, 47, 21, 93,
  75, 60, 19, 5, 32, 103, 20, 89, 96, 70, 95, 58,
  54, 67, 63, 74, 2, 109, 12, 34, 65, 78, 51, 8,
  47, 92, 2, 93, 76, 54, 114, 10, 109, 23, 50, 108,
  42, 96, 53, 45, 100, 5, 20, 75, 60, 11, 29, 110,
  37, 82, 7, 24, 63, 70, 86, 57, 16, 14, 88, 116,
  62, 9, 83, 94, 113, 8, 49, 6, 76, 77, 39, 27,
  88, 55, 46, 7, 82, 25, 15, 59, 89, 72, 112, 17,
  37, 24, 55, 12, 111, 7, 32, 36, 25, 71, 119, 13,
  50, 23, 102, 80, 10, 27, 117, 45, 30, 47, 76, 6,
  101, 28, 65, 10, 34, 49, 54, 76, 8, 102, 2, 114,
  45, 39, 75, 27, 49, 10, 11, 103, 29, 28, 4, 60,
  12, 24, 34, 28, 65, 19, 4, 60, 119, 32, 107, 36,
  89, 17, 96, 20, 42, 106, 115, 72, 0, 25, 85, 59,
  78, 3, 91, 51, 61, 62, 94, 8, 105, 83, 79, 9,
  2, 10, 102, 50, 86, 92, 65, 109, 28, 75, 19, 95,
  112, 72, 0, 26, 53, 42, 87, 41, 18, 81, 17, 96,
  33, 88, 82, 43, 1, 46, 69, 40, 16, 104, 14, 57,
  97, 45, 30, 53, 18, 80, 5, 64, 81, 50, 23, 108,
  3, 56, 68, 79, 91, 22, 31, 33, 52, 15, 44, 73,
  61, 71, 13, 51, 34, 12, 62, 111, 107, 4, 35, 36]

if __name__ == "__main__":
    test_initialization()